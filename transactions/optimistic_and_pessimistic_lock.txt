Изоляция — это свойство, которое определяет как/когда изменения сделанные одной операцией будут видны конкурентной операции.
Стандарт SQL определяет четыре уровня изоляции: Read uncommitted, Read committed, Repeatable read, Serializable.
Например в PostgreSQL внутренне реализована поддержка только двух уровней изоляции Read committed и Serializable.

Оптимистик
блокировка на чтение - позволяет другим транзакциям читать строку и ставить на нее такую же совместную блокировку,
 но не позволяет изменять строку или ставить исключительную блокировку.


Пессимистик
блокировка на запись - запрещает другим транзакциям блокировать строку,
 а также может блокировать строку как на запись, так и на чтение в зависимости от текущего уровня изоляции.


Также блокировки можно поделить по детальности:

    Табличная блокировка - блокирует всю таблицу. Когда клиент хочет выполнить запись в таблицу (вставку, удаление, обновление и т. п.), он захватывает блокировку на запись для всей таблицы. Такая блокировка предотвращает все остальные операции чтения и записи. В тот момент, когда никто не производит запись, любой клиент может получить блокировку на чтение и она не будет конфликтовать с другими аналогичными блокировками.
    Построчная блокировка - Блокировки строк реализуются подсистемами хранения данных, а не сервером (взгляните на иллюстрацию логической архитектуры). Сервер ничего не знает о блокировках, реализованных подсистемой хранения данных.
--------------------------------
Примеры своей реализации:
Добавить поле version
И при параллельном апдейте изменять это поле
и когда второлй запрос делает UPDATE WHERE id = "..." AND version = "old version", ему возвращается что изменено 0 записей
это значит что ресурс кто-то изменил до него
--------------------------------